// <auto-generated />
using System;
using ECommerce.Repositories.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerce.Repositories.Migrations
{
    [DbContext(typeof(ECommerceDbContext))]
    partial class ECommerceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ECommerce.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "840c569c-bbf5-4697-b3b4-ba24d863fea4",
                            Email = "johndoe@example.com",
                            EmailConfirmed = true,
                            FullName = "John Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHNDOE@EXAMPLE.COM",
                            NormalizedUserName = "JOHNDOE",
                            PasswordHash = "AQAAAAEAACcQAAAAEDDWhzxKurHEF0/gu5tqDKRPmvxL6Zqo350GfyvY7RJmw8dW7wJjbT4aBWaNXKV4mg==",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "c6e0d403-dd11-48cc-904d-8463fb52bf60",
                            TwoFactorEnabled = false,
                            UserName = "johndoe"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b7e4ca3-6cd5-42df-acef-7af3f4cccb8b",
                            Email = "janesmith@example.com",
                            EmailConfirmed = true,
                            FullName = "Jane Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "JANESMITH@EXAMPLE.COM",
                            NormalizedUserName = "JANESMITH",
                            PasswordHash = "AQAAAAEAACcQAAAAED+R1Kgmgv2MtL2jdciUOiAi1N0w9qYwKMyWyY2xwVirXyE+uw4cU/vvDknIj0KSVQ==",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "3afc6a51-5a2a-496c-8b2a-dca3e1ed2c29",
                            TwoFactorEnabled = false,
                            UserName = "janesmith"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11c16693-a7b9-4844-b3ab-daafed88fb37",
                            Email = "kikbal.dandir@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Kazım İkbal Dandır",
                            LockoutEnabled = false,
                            NormalizedEmail = "KAZIMIKBALDANDIR@GMAIL.COM",
                            NormalizedUserName = "KAZIMIKBALDANDIR",
                            PasswordHash = "Kazim.123",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "184e318e-e773-4709-92aa-814ac0735066",
                            TwoFactorEnabled = false,
                            UserName = "kazimdandir"
                        });
                });

            modelBuilder.Entity("ECommerce.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Footwear"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Jewellery"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Hats & Caps"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sunglasses"
                        },
                        new
                        {
                            Id = 5,
                            Name = "T-Shirts"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Tracksuits"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Jeans"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Hoodies & Sweatshirts"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Coats & Jackets"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Trousers"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Shorts"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Shirts"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Joggers"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Cargos"
                        });
                });

            modelBuilder.Entity("ECommerce.Entities.FavoriteProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId1")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductId1");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteProducts");
                });

            modelBuilder.Entity("ECommerce.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailsCare")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 5,
                            DetailsCare = "100% cotton. Model is 6\"1 and wears a size 3XL",
                            ImagePath = "/img/Oversized Bird Graphic T-shirt.png",
                            Name = "Oversized Bird Graphic T-shirt",
                            Price = 14m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 5,
                            DetailsCare = "100% Baumwolle. Das Model ist 185cm groß und trägt Größe M",
                            ImagePath = "/img/Oversized Deadpool Cereal License Print T-shirt.png",
                            Name = "Oversized Deadpool Cereal License Print T-shirt",
                            Price = 20m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 5,
                            DetailsCare = "100% Baumwolle",
                            ImagePath = "/img/Chocolate Oversized Extended Neck ABODE T-shirt.png",
                            Name = "Chocolate Oversized Extended Neck ABODE T-shirt",
                            Price = 14m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 7,
                            DetailsCare = "100% COTTON. MODEL IS 6'1 AND WEARS SIZE 32.",
                            ImagePath = "/img/Baggy Rigid Jean.png",
                            Name = "Baggy Rigid Jean",
                            Price = 25m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 7,
                            DetailsCare = "100% COTTON. MODEL IS 6'1 AND WEARS SIZE 32.",
                            ImagePath = "/img/Chocolate Relaxed Rigid Flare Patchwork Jeans.png",
                            Name = "Chocolate Relaxed Rigid Flare Patchwork Jeans",
                            Price = 42m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 7,
                            DetailsCare = "100% Baumwolle. Das Model ist 185cm groß und trägt Größe 32.",
                            ImagePath = "/img/Grey Slim Flared All Over Ripped Jeans With Let Down Hem.png",
                            Name = "Grey Slim Flared All Over Ripped Jeans With Let Down Hem",
                            Price = 35m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 12,
                            DetailsCare = "50% Viskose, 40% Baumwolle, 10% Leinen. Das Model ist 185cm groß und trägt Größe M",
                            ImagePath = "/img/Short Sleeve Linen Shirt.png",
                            Name = "Short Sleeve Linen Shirt",
                            Price = 50m
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 12,
                            DetailsCare = "100% Polyester. Model ist 185cm geoß und trägt Größe M.",
                            ImagePath = "/img/Green Satin Oversized Revere Statue Border Shirt.png",
                            Name = "Green Satin Oversized Revere Statue Border Shirt",
                            Price = 28m
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            DetailsCare = "Upper: Polyurethane (PU) Lining: Textile Insole: Textile Outsole: Thermoplastic Rubber (TPR)",
                            ImagePath = "/img/Tonal Chunky Trainers In Blue.png",
                            Name = "Tonal Chunky Trainers In Blue",
                            Price = 35m
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            DetailsCare = "UPPER/LINING : 100% PU SYNTHETIC, SOLE: 100% THERMOPLASTIC RUBBER",
                            ImagePath = "/img/Stone Track Sole Loafer.png",
                            Name = "Stone Track Sole Loafer",
                            Price = 35m
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 1,
                            DetailsCare = "UPPER : 100% TEXTILE LINING : 100%PU SYNTH , SOCKS: 100%PU SYNTH, MID SOLE : 100% PU SOLE : 100% EVA",
                            ImagePath = "/img/Red Tapestry Buckle Detail Mule.png",
                            Name = "Red Tapestry Buckle Detail Mule",
                            Price = 32m
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 2,
                            DetailsCare = "zinc alloy+glass",
                            ImagePath = "/img/Silver Cuban Chain Jean Chain.png",
                            Name = "Silver Cuban Chain Jean Chain",
                            Price = 10m
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 2,
                            DetailsCare = "90%zinc alloy+8%glass+2%epoxy",
                            ImagePath = "/img/Silver 3 Pack Mixed Bead Rings.png",
                            Name = "Silver 3 Pack Mixed Bead Rings",
                            Price = 8m
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 3,
                            DetailsCare = "80% Polyester, 20% Kunststoff",
                            ImagePath = "/img/BM Flames Cap In Black.png",
                            Name = "BM Flames Cap In Black",
                            Price = 8m
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 3,
                            DetailsCare = "100% acrylic",
                            ImagePath = "/img/Black Gothic Logo Jacquard Beanie.png",
                            Name = "Black Gothic Logo Jacquard Beanie",
                            Price = 12m
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 4,
                            DetailsCare = "90% Polycarbonate 10% Copper",
                            ImagePath = "/img/Star Rimless Sunglasses In Red.png",
                            Name = "Star Rimless Sunglasses In Red",
                            Price = 8m
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 4,
                            DetailsCare = "90% Metal, 10% Plastic.",
                            ImagePath = "/img/Brown Aviator Matte Sunglasses.png",
                            Name = "Brown Aviator Matte Sunglasses",
                            Price = 6m
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 6,
                            DetailsCare = "60% Cotton 40% Polyester. Model is 6'1 and wears size M.",
                            ImagePath = "/img/Black Oversized Boxy Over The Seams Eagle Graphic Tracksuit.png",
                            Name = "Black Oversized Boxy Over The Seams Eagle Graphic Tracksuit",
                            Price = 45m
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 6,
                            DetailsCare = "60% Baumwolle 40% Polyester",
                            ImagePath = "/img/Burgundy Oversized Boxy Cross Applique Zip Through Hoodie And Relaxed Jogger Tracksuit.png",
                            Name = "Burgundy Oversized Boxy Cross Applique Zip Through Hoodie And Relaxed Jogger Tracksuit",
                            Price = 60m
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 8,
                            DetailsCare = "50% Baumwolle, 50% Polyester",
                            ImagePath = "/img/Sage Oversized Boxy ABODE Hoodie.png",
                            Name = "Sage Oversized Boxy ABODE Hoodie",
                            Price = 25m
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 8,
                            DetailsCare = "50% Baumwolle und 50% Polyester, das Model ist 185cm groß und trägt Größe M.",
                            ImagePath = "/img/Sand Monaco Back Print Sweatshirt.png",
                            Name = "Sand Monaco Back Print Sweatshirt",
                            Price = 30m
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 9,
                            DetailsCare = "100% Polyurethane. Model is 6'1 and wears size M.",
                            ImagePath = "/img/Yellow Oversized PU Badge Moto Jacket.png",
                            Name = "Yellow Oversized PU Badge Moto Jacket",
                            Price = 70m
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 9,
                            DetailsCare = "100% Baumwolle. Model ist 185cm groß und trägt Größe M",
                            ImagePath = "/img/Washed black Oversized Dirty Wash Carpenter Denim Biker Jacket.png",
                            Name = "Washed black Oversized Dirty Wash Carpenter Denim Biker Jacket",
                            Price = 40m
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 10,
                            DetailsCare = "100% Cotton. Model is 6'1 and wears size M/ 32.",
                            ImagePath = "/img/Stone Fixed Waist Relaxed Applique Print Trouser.png",
                            Name = "Stone Fixed Waist Relaxed Applique Print Trouser",
                            Price = 35m
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 10,
                            DetailsCare = "100% Cotton. Model is 6'1 and wears size M.",
                            ImagePath = "/img/Slate Elasticated Waist Relaxed Fit Buckle Cargo Trouser.png",
                            Name = "Slate Elasticated Waist Relaxed Fit Buckle Cargo Trouser",
                            Price = 35m
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 11,
                            DetailsCare = "98% Baumwolle, 2% Elasthan. Model ist 185cm groß und trägt Größe M.",
                            ImagePath = "/img/Grey Slim Fit Elasticated Waist Cargo Shorts.png",
                            Name = "Grey Slim Fit Elasticated Waist Cargo Shorts",
                            Price = 22m
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 11,
                            DetailsCare = "52% Polyester, 48% Baumwolle. Model ist 185cm groß und trägt Größe M",
                            ImagePath = "/img/Charcoal Oversized Drop Crotch Rib Hem Loopback Short.png",
                            Name = "Charcoal Oversized Drop Crotch Rib Hem Loopback Short",
                            Price = 20m
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 13,
                            DetailsCare = "60% Baumwolle, 40% Polyester. Model ist 185cm groß und trägt EU Größe M.",
                            ImagePath = "/img/Blue Relaxed Fit Split Hem Jacquard Joggers.png",
                            Name = "Blue Relaxed Fit Split Hem Jacquard Joggers",
                            Price = 30m
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 13,
                            DetailsCare = "80% cotton 20% polyester. Model is 6\\'1 and wears a size 3XL",
                            ImagePath = "/img/Mint Plus Oversized Heavy Washed Applique Jogger.png",
                            Name = "Mint Plus Oversized Heavy Washed Applique Jogger",
                            Price = 30m
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = 14,
                            DetailsCare = "98% Baumwolle, 2% Elastan. Das Model ist 185cm groß und trägt Größe 32",
                            ImagePath = "/img/Olive Fixed Waist Slim Stacked Flare Strap Cargo Trouser.png",
                            Name = "Olive Fixed Waist Slim Stacked Flare Strap Cargo Trouser",
                            Price = 40m
                        },
                        new
                        {
                            Id = 31,
                            CategoryId = 14,
                            DetailsCare = "100% cotton. This model is 6\"1 and wears a size 3XL.",
                            ImagePath = "/img/Grey Plus Fixed Waist Straight Fit Cargo Trousers.png",
                            Name = "Grey Plus Fixed Waist Straight Fit Cargo Trousers",
                            Price = 30m
                        });
                });

            modelBuilder.Entity("ECommerce.Entities.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCarts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            UserId = "2"
                        });
                });

            modelBuilder.Entity("ECommerce.Entities.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("int");

                    b.Property<int?>("SizeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.HasIndex("SizeId");

                    b.ToTable("ShoppingCartItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 1,
                            Quantity = 1,
                            ShoppingCartId = 1,
                            SizeId = 12
                        },
                        new
                        {
                            Id = 2,
                            ProductId = 2,
                            Quantity = 2,
                            ShoppingCartId = 1,
                            SizeId = 11
                        },
                        new
                        {
                            Id = 3,
                            ProductId = 3,
                            Quantity = 1,
                            ShoppingCartId = 2,
                            SizeId = 13
                        },
                        new
                        {
                            Id = 4,
                            ProductId = 4,
                            Quantity = 3,
                            ShoppingCartId = 2,
                            SizeId = 3
                        },
                        new
                        {
                            Id = 5,
                            ProductId = 5,
                            Quantity = 1,
                            ShoppingCartId = 1,
                            SizeId = 4
                        },
                        new
                        {
                            Id = 6,
                            ProductId = 6,
                            Quantity = 2,
                            ShoppingCartId = 2,
                            SizeId = 5
                        },
                        new
                        {
                            Id = 7,
                            ProductId = 7,
                            Quantity = 5,
                            ShoppingCartId = 1,
                            SizeId = 10
                        },
                        new
                        {
                            Id = 8,
                            ProductId = 8,
                            Quantity = 1,
                            ShoppingCartId = 2,
                            SizeId = 14
                        },
                        new
                        {
                            Id = 9,
                            ProductId = 9,
                            Quantity = 2,
                            ShoppingCartId = 2,
                            SizeId = 6
                        },
                        new
                        {
                            Id = 10,
                            ProductId = 10,
                            Quantity = 1,
                            ShoppingCartId = 1,
                            SizeId = 7
                        },
                        new
                        {
                            Id = 11,
                            ProductId = 11,
                            Quantity = 6,
                            ShoppingCartId = 1,
                            SizeId = 8
                        },
                        new
                        {
                            Id = 12,
                            ProductId = 12,
                            Quantity = 1,
                            ShoppingCartId = 1,
                            SizeId = 17
                        },
                        new
                        {
                            Id = 13,
                            ProductId = 13,
                            Quantity = 2,
                            ShoppingCartId = 2,
                            SizeId = 17
                        },
                        new
                        {
                            Id = 14,
                            ProductId = 14,
                            Quantity = 5,
                            ShoppingCartId = 2,
                            SizeId = 11
                        },
                        new
                        {
                            Id = 15,
                            ProductId = 15,
                            Quantity = 3,
                            ShoppingCartId = 1,
                            SizeId = 12
                        },
                        new
                        {
                            Id = 16,
                            ProductId = 16,
                            Quantity = 2,
                            ShoppingCartId = 1,
                            SizeId = 17
                        },
                        new
                        {
                            Id = 17,
                            ProductId = 17,
                            Quantity = 1,
                            ShoppingCartId = 2,
                            SizeId = 17
                        },
                        new
                        {
                            Id = 18,
                            ProductId = 18,
                            Quantity = 2,
                            ShoppingCartId = 1,
                            SizeId = 4
                        },
                        new
                        {
                            Id = 19,
                            ProductId = 19,
                            Quantity = 4,
                            ShoppingCartId = 2,
                            SizeId = 2
                        },
                        new
                        {
                            Id = 20,
                            ProductId = 20,
                            Quantity = 2,
                            ShoppingCartId = 1,
                            SizeId = 14
                        },
                        new
                        {
                            Id = 21,
                            ProductId = 21,
                            Quantity = 1,
                            ShoppingCartId = 2,
                            SizeId = 16
                        },
                        new
                        {
                            Id = 22,
                            ProductId = 22,
                            Quantity = 2,
                            ShoppingCartId = 1,
                            SizeId = 12
                        },
                        new
                        {
                            Id = 23,
                            ProductId = 23,
                            Quantity = 1,
                            ShoppingCartId = 2,
                            SizeId = 13
                        },
                        new
                        {
                            Id = 24,
                            ProductId = 24,
                            Quantity = 2,
                            ShoppingCartId = 2,
                            SizeId = 9
                        },
                        new
                        {
                            Id = 25,
                            ProductId = 25,
                            Quantity = 4,
                            ShoppingCartId = 1,
                            SizeId = 6
                        },
                        new
                        {
                            Id = 26,
                            ProductId = 26,
                            Quantity = 2,
                            ShoppingCartId = 1,
                            SizeId = 12
                        },
                        new
                        {
                            Id = 27,
                            ProductId = 27,
                            Quantity = 5,
                            ShoppingCartId = 2,
                            SizeId = 10
                        },
                        new
                        {
                            Id = 28,
                            ProductId = 28,
                            Quantity = 2,
                            ShoppingCartId = 1,
                            SizeId = 1
                        },
                        new
                        {
                            Id = 29,
                            ProductId = 29,
                            Quantity = 1,
                            ShoppingCartId = 2,
                            SizeId = 2
                        },
                        new
                        {
                            Id = 30,
                            ProductId = 30,
                            Quantity = 1,
                            ShoppingCartId = 1,
                            SizeId = 3
                        },
                        new
                        {
                            Id = 31,
                            ProductId = 31,
                            Quantity = 3,
                            ShoppingCartId = 1,
                            SizeId = 14
                        });
                });

            modelBuilder.Entity("ECommerce.Entities.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("SizeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SizeName = "28"
                        },
                        new
                        {
                            Id = 2,
                            SizeName = "32"
                        },
                        new
                        {
                            Id = 3,
                            SizeName = "34"
                        },
                        new
                        {
                            Id = 4,
                            SizeName = "36"
                        },
                        new
                        {
                            Id = 5,
                            SizeName = "38"
                        },
                        new
                        {
                            Id = 6,
                            SizeName = "40"
                        },
                        new
                        {
                            Id = 7,
                            SizeName = "42"
                        },
                        new
                        {
                            Id = 8,
                            SizeName = "44"
                        },
                        new
                        {
                            Id = 9,
                            SizeName = "46"
                        },
                        new
                        {
                            Id = 10,
                            SizeName = "XS"
                        },
                        new
                        {
                            Id = 11,
                            SizeName = "S"
                        },
                        new
                        {
                            Id = 12,
                            SizeName = "M"
                        },
                        new
                        {
                            Id = 13,
                            SizeName = "L"
                        },
                        new
                        {
                            Id = 14,
                            SizeName = "XL"
                        },
                        new
                        {
                            Id = 15,
                            SizeName = "XXL"
                        },
                        new
                        {
                            Id = 16,
                            SizeName = "XXXL"
                        },
                        new
                        {
                            Id = 17,
                            SizeName = "One Size"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ECommerce.Entities.FavoriteProducts", b =>
                {
                    b.HasOne("ECommerce.Entities.ApplicationUser", null)
                        .WithMany("FavoriteProducts")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ECommerce.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECommerce.Entities.Product", null)
                        .WithMany("FavoriteProducts")
                        .HasForeignKey("ProductId1");

                    b.HasOne("ECommerce.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommerce.Entities.Product", b =>
                {
                    b.HasOne("ECommerce.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ECommerce.Entities.ShoppingCart", b =>
                {
                    b.HasOne("ECommerce.Entities.ApplicationUser", "User")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommerce.Entities.ShoppingCartItem", b =>
                {
                    b.HasOne("ECommerce.Entities.Product", "Product")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Entities.ShoppingCart", "ShoppingCart")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Entities.Size", "Size")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ECommerce.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ECommerce.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ECommerce.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerce.Entities.ApplicationUser", b =>
                {
                    b.Navigation("FavoriteProducts");

                    b.Navigation("ShoppingCarts");
                });

            modelBuilder.Entity("ECommerce.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ECommerce.Entities.Product", b =>
                {
                    b.Navigation("FavoriteProducts");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("ECommerce.Entities.ShoppingCart", b =>
                {
                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("ECommerce.Entities.Size", b =>
                {
                    b.Navigation("ShoppingCartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
